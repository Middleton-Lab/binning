?package.skeleton
f <- function(x,y) x+y#
g <- function(x,y) x-y#
d <- data.frame(a=1, b=2)#
e <- rnorm(1000)#
#
package.skeleton(list=c("f","g","d","e"), name="mypkg")
?package.skeleton
x_1 <- 2
x_1
setwd('/Users/kmm/Documents/Dropbox/Projects/Mouse Project/binning')
source('R/read.dat.R')#
source('E/stackdata.R')#
source('R/plot.running.R')#
source('R/bin.running.R')
source('R/stackdata.R')
A  <- read.dat('data/061105A.DAT')#
B  <- read.dat('data/061105B.DAT')#
C  <- read.dat('data/061105C.DAT')#
D  <- read.dat('data/061105D.DAT')
bin.size <- 20#
aggrA <- bin.running(A061105, computer = 'A', bin.size = bin.size)
A
str(A)
whldat <- A
whldat <- A#
binsize <- 10#
first.bin.size <- 10#
bins.out <- 'ALL'#
bin.start <- 1#
start.at.1pm <- TRUE#
computer <- 'A'
if (ncol(whldat) != 157){#
    if (ncol(whldat) != 151){#
        stop("The wheel running file does not have the correct number of columns.", call. = FALSE)#
    }#
}
if (ncol(whldat[, -1]) != 157){#
    if (ncol(whldat) != 151){#
        stop("The wheel running file does not have the correct number of columns.", call. = FALSE)#
    }#
}
!exists('first.bin.size')
numwhl <- (ncol(whldat)-7)/3
numwhl
whldat.str <- whldat[ , -c(3:7, seq(8, ncol(whldat), 3), seq(9, ncol(whldat), 3))]
whldat.str
names(whldat.str)[1] <- "hr"#
names(whldat.str)[2] <- "min"#
names(whldat.str)[3:(numwhl+2)] <- paste(1:numwhl, sep = "")
str(whldat.str)
whldat.str <- cbind(whldat.str, interval = 1:nrow(whldat))
if (bin.start != 1){#
    whldat.zero <- whldat.str[(bin.start + 1):nrow(whldat.str),]#
} else {#
    whldat.zero <- whldat.str#
}
n.bins <- nrow(whldat.zero)%/%bin.size      #
leftover <- nrow(whldat.zero)%%bin.size
n.bins
leftover
if (bins.out == 'ALL') bins.out <- n.bins#
if (n.bins < bins.out){#
    stop("bins.out is too large. Not enough bins in data.", call. = FALSE)#
}
bins.out
if (leftover > 0) whldat.zero <- whldat.zero[1:(nrow(whldat.zero)-leftover),]
minbin <- rep(1:n.bins, each = bin.size)
minbin
hr <- whldat.zero$hr#
minute <- whldat.zero$min#
whldat.zero <- whldat.zero[,-(1:2)]
hours <- matrix(data = NA, nrow = n.bins, ncol = numwhl)
hours
running <- matrix(data = NA, nrow = n.bins, ncol = numwhl)
running
for (i in 1:numwhl){#
    agr.run <- aggregate(#
        list(run = whldat.zero[,i]),#
        by = list(bin = minbin),#
        FUN = sum)#
    running[,i] <- agr.run[,2]#
}
running
maxint <- matrix(data = NA, nrow = n.bins, ncol = numwhl)#
for (i in 1:numwhl){#
    agr.max <- aggregate(#
        list(run = whldat.zero[,i]),#
        by = list(bin = minbin),#
        FUN = max)#
    maxint[,i] <- agr.max[,2]#
}
maxint
intsum <- matrix(data = NA, nrow = n.bins, ncol = numwhl)#
for (i in 1:numwhl){#
    agr.int <- aggregate(#
        list(run = whldat.zero[,i]),#
        by = list(bin = minbin),#
        FUN = function(x){sum(x > 0)})#
    intsum[,i] <- agr.int[,2]#
}
intsum
rpm <- ifelse(running == 0, 0, running / intsum)
running.trunc <- running[1:bins.out,]#
maxint.trunc <- maxint[1:bins.out,]#
intsum.trunc <- intsum[1:bins.out,]#
rpm.trunc <- rpm[1:bins.out,]
binnum <- 1:bins.out#
Run <- paste("run", binnum, sep = "_")#
Max <- paste("max", binnum, sep = "_")#
Int <- paste("int", binnum, sep = "_")#
RPM <- paste("rpm", binnum, sep = "_")
t.running <- data.frame(t(running.trunc))#
names(t.running) <- Run#
t.maxint <- data.frame(t(maxint.trunc))#
names(t.maxint) <- Max#
t.intsum <- data.frame(t(intsum.trunc))#
names(t.intsum) <- Int#
t.rpm <- data.frame(t(rpm.trunc))#
names(t.rpm) <- RPM
t.rpm
running
if (computer == 'A') whlnum <-   1:50#
if (computer == 'B') whlnum <-  51:100#
if (computer == 'C') whlnum <- 101:150#
if (computer == 'D') whlnum <- 151:198#
#
aggr <- cbind(whlnum, t.running, t.maxint, t.intsum, t.rpm)
aggr
str(aggr)
hr
times <- data.frame(hr = whldat.zero$hr, minute = whldat.zero$min)
times
times <- data.frame(hr = whldat.zero$hr, minute = whldat.zero$min)
whldat.zero$hr
 whldat.zero
head(whldat.zero)
if (ncol(whldat) != 157){#
    if (ncol(whldat) != 151){#
        stop("The wheel running file does not have the correct number of columns.", call. = FALSE)#
    }#
}#
#
#
if (!exists('first.bin.size')) first.bin.size <- bin.size#
#
#
#
#
#
#
#
numwhl <- (ncol(whldat)-7)/3#
#
#
#
#
#
whldat.str <- whldat[ , -c(3:7, seq(8, ncol(whldat), 3), seq(9, ncol(whldat), 3))]#
#
#
names(whldat.str)[1] <- "hr"#
names(whldat.str)[2] <- "min"#
names(whldat.str)[3:(numwhl+2)] <- paste(1:numwhl, sep = "")#
#
#
whldat.str <- cbind(whldat.str, interval = 1:nrow(whldat))#
#
#
    #
    #
#
#
#
#
if (bin.start != 1){#
    whldat.zero <- whldat.str[(bin.start + 1):nrow(whldat.str),]#
} else {#
    whldat.zero <- whldat.str#
}#
#
#
n.bins <- nrow(whldat.zero)%/%bin.size      #
leftover <- nrow(whldat.zero)%%bin.size     #
#
if (bins.out == 'ALL') bins.out <- n.bins#
if (n.bins < bins.out){#
    stop("bins.out is too large. Not enough bins in data.", call. = FALSE)#
}#
#
#
if (leftover > 0) whldat.zero <- whldat.zero[1:(nrow(whldat.zero)-leftover),]#
#
#
minbin <- rep(1:n.bins, each = bin.size)
minbin
str(whldat.zero)
times <- data.frame(hr = whldat.zero$hr, minute = whldat.zero$min) #
whldat.zero <- whldat.zero[,-(1:2)]
times
nrow(times)
length(minbin)
if (ncol(whldat) != 157){#
    if (ncol(whldat) != 151){#
        stop("The wheel running file does not have the correct number of columns.", call. = FALSE)#
    }#
}#
#
#
if (!exists('first.bin.size')) first.bin.size <- bin.size#
#
#
#
#
#
#
#
numwhl <- (ncol(whldat)-7)/3#
#
#
#
#
#
whldat.str <- whldat[ , -c(3:7, seq(8, ncol(whldat), 3), seq(9, ncol(whldat), 3))]#
#
#
names(whldat.str)[1] <- "hr"#
names(whldat.str)[2] <- "min"#
names(whldat.str)[3:(numwhl+2)] <- paste(1:numwhl, sep = "")#
#
#
whldat.str <- cbind(whldat.str, interval = 1:nrow(whldat))#
#
#
    #
    #
#
#
#
#
if (bin.start != 1){#
    whldat.zero <- whldat.str[(bin.start + 1):nrow(whldat.str),]#
} else {#
    whldat.zero <- whldat.str#
}#
#
#
n.bins <- nrow(whldat.zero)%/%bin.size      #
leftover <- nrow(whldat.zero)%%bin.size     #
#
if (bins.out == 'ALL') bins.out <- n.bins#
if (n.bins < bins.out){#
    stop("bins.out is too large. Not enough bins in data.", call. = FALSE)#
}#
#
#
if (leftover > 0) whldat.zero <- whldat.zero[1:(nrow(whldat.zero)-leftover),]#
#
#
minbin <- rep(1:n.bins, each = bin.size)#
#
#
times <- data.frame(hr = whldat.zero$hr, minute = whldat.zero$min, minbin) #
whldat.zero <- whldat.zero[,-(1:2)]
times
aggregate(#
	list = times, #
	by = list(times$minbin),#
	FUN = min)
times.agr <- aggregate(#
	list = times, #
	by = list(bin = minbin),#
	FUN = min)
times.agr <- aggregate(#
	list(times), #
	by = list(bin = minbin),#
	FUN = min)
times.agr
bin.size
whldat <- A#
bin.size <- 10#
first.bin.size <- 10#
bins.out <- 'ALL'#
bin.start <- 1#
start.at.1pm <- TRUE#
computer <- 'A'
if (ncol(whldat) != 157){#
    if (ncol(whldat) != 151){#
        stop("The wheel running file does not have the correct number of columns.", call. = FALSE)#
    }#
}#
#
#
if (!exists('first.bin.size')) first.bin.size <- bin.size#
#
#
#
#
#
#
#
numwhl <- (ncol(whldat)-7)/3#
#
#
#
#
#
whldat.str <- whldat[ , -c(3:7, seq(8, ncol(whldat), 3), seq(9, ncol(whldat), 3))]#
#
#
names(whldat.str)[1] <- "hr"#
names(whldat.str)[2] <- "min"#
names(whldat.str)[3:(numwhl+2)] <- paste(1:numwhl, sep = "")#
#
#
whldat.str <- cbind(whldat.str, interval = 1:nrow(whldat))#
#
#
    #
    #
#
#
#
#
if (bin.start != 1){#
    whldat.zero <- whldat.str[(bin.start + 1):nrow(whldat.str),]#
} else {#
    whldat.zero <- whldat.str#
}#
#
#
n.bins <- nrow(whldat.zero)%/%bin.size      #
leftover <- nrow(whldat.zero)%%bin.size     #
#
if (bins.out == 'ALL') bins.out <- n.bins#
if (n.bins < bins.out){#
    stop("bins.out is too large. Not enough bins in data.", call. = FALSE)#
}#
#
#
if (leftover > 0) whldat.zero <- whldat.zero[1:(nrow(whldat.zero)-leftover),]#
#
#
minbin <- rep(1:n.bins, each = bin.size)#
#
#
times <- data.frame(hr = whldat.zero$hr, minute = whldat.zero$min, minbin) #
whldat.zero <- whldat.zero[,-(1:2)]#
#
#
running <- matrix(data = NA, nrow = n.bins, ncol = numwhl)#
for (i in 1:numwhl){#
    agr.run <- aggregate(#
        list(run = whldat.zero[,i]),#
        by = list(bin = minbin),#
        FUN = sum)#
    running[,i] <- agr.run[,2]#
}#
#
#
maxint <- matrix(data = NA, nrow = n.bins, ncol = numwhl)#
for (i in 1:numwhl){#
    agr.max <- aggregate(#
        list(run = whldat.zero[,i]),#
        by = list(bin = minbin),#
        FUN = max)#
    maxint[,i] <- agr.max[,2]#
}#
#
#
intsum <- matrix(data = NA, nrow = n.bins, ncol = numwhl)#
for (i in 1:numwhl){#
    agr.int <- aggregate(#
        list(run = whldat.zero[,i]),#
        by = list(bin = minbin),#
        FUN = function(x){sum(x > 0)})#
    intsum[,i] <- agr.int[,2]#
}#
#
#
rpm <- ifelse(running == 0, 0, running / intsum)#
#
#
running.trunc <- running[1:bins.out, ]#
maxint.trunc <- maxint[1:bins.out, ]#
intsum.trunc <- intsum[1:bins.out, ]#
rpm.trunc <- rpm[1:bins.out, ]#
#
#
binnum <- 1:bins.out#
Run <- paste("run", binnum, sep = "_")#
Max <- paste("max", binnum, sep = "_")#
Int <- paste("int", binnum, sep = "_")#
RPM <- paste("rpm", binnum, sep = "_")#
#
#
t.running <- data.frame(t(running.trunc))#
names(t.running) <- Run#
t.maxint <- data.frame(t(maxint.trunc))#
names(t.maxint) <- Max#
t.intsum <- data.frame(t(intsum.trunc))#
names(t.intsum) <- Int#
t.rpm <- data.frame(t(rpm.trunc))#
names(t.rpm) <- RPM#
#
#
if (computer == 'A') whlnum <-   1:50#
if (computer == 'B') whlnum <-  51:100#
if (computer == 'C') whlnum <- 101:150#
if (computer == 'D') whlnum <- 151:198#
#
aggr <- cbind(whlnum, t.running, t.maxint, t.intsum, t.rpm)#
#
#
#
times.agr <- aggregate(#
	list(times), #
	by = list(bin = minbin),#
	FUN = min)
times.agr
times.agr <- aggregate(#
	list(times), #
	by = list(bin = minbin),#
	FUN = min)[, -4]
times.agr
bin.times <- aggregate(#
	list(times), #
	by = list(bin = minbin),#
	FUN = min)[, -4]
str(aggr)
aggrA <- bin.running(A061105, computer = 'A', bin.size = bin.size)
aggrA <- bin.running(A, computer = 'A', bin.size = bin.size)
str(aggrA)
source('R/read.dat.R')#
source('R/stackdata.R')#
source('R/plot.running.R')#
source('R/bin.running.R')#
#
A  <- read.dat('data/061105A.DAT')#
B  <- read.dat('data/061105B.DAT')#
C  <- read.dat('data/061105C.DAT')#
D  <- read.dat('data/061105D.DAT')
aggrA <- bin.running(A, computer = 'A', bin.size = bin.size)#
aggrB <- bin.running(B, computer = 'B', bin.size = bin.size)#
aggrC <- bin.running(C, computer = 'C', bin.size = bin.size)#
aggrD <- bin.running(D, computer = 'D', bin.size = bin.size)
str(aggrA)
running <- stackdata(aggrA[[1]], aggrB[[1]], aggrC[[1]], aggrD[[1]])
str(running)
time.data <- aggrA[[2]]
time.data
n.bins <- nrow(time.data)
n.bins
subs <- running[whlnum,]
subs
whlnum
whlnum <- 1
subs <- running[whlnum,]
subs
    dat <- t(subs[,2:(n.bins+1)])
dat
    ylabel <- 'Revolutions per bin'
plot(dat, type = 'l', axes = FALSE, ylab = ylabel, xlab = 'Hour')
axis(1, at = 1:n.bins, labels = time.data$hour)
axis(2)#
box()
time.data$hour
time.data
hrmin <- paste(time.data$hr, time.data$min, sep = ':')
hrmin
hrmin <- paste(time.data$hr, time.data$min, '00', sep = ':')
hrmin <- strptime(paste(time.data$hr, time.data$min, '00', sep = ':'), '%T')
hrmin
plot(dat, type = 'l', axes = FALSE, ylab = ylabel, xlab = 'Hour')#
axis(1, at = 1:n.bins, labels = hrmin, las = 2)#
axis(2)#
box()
plot(dat, type = 'l', axes = FALSE, ylab = ylabel, xlab = 'Hour')#
axis(1, at = 1:n.bins, labels = hrmin, las = 2, cex.axis = 0.75)#
axis(2)#
box()
hrmin <- paste(time.data$hr, time.data$min, sep = ':')
hrmin
plot(dat, type = 'l', axes = FALSE, ylab = ylabel, xlab = 'Hour')#
axis(1, las = 2, cex.axis = 0.75)#
axis(2)#
box()
?strptime
str(hrmin)
hrmin <- strptime(paste(time.data$hr, time.data$min, '00', sep = ':'), '%T')
str(hrmin)
strptime(hrmin, '%h:%m')
?strptime
format(hrmin, '%H:%M')
hrmin <- strptime(paste(time.data$hr, time.data$min, '00', sep = ':'), '%T')#
hrmin <- format(hrmin, '%H:%M')
plot(dat, type = 'l', axes = FALSE, ylab = ylabel, xlab = 'Hour')#
axis(1, labels = hrmin, las = 2, cex.axis = 0.75)#
axis(2)#
box()
plot(dat, type = 'l', axes = FALSE, ylab = ylabel, xlab = 'Hour')#
axis(1, at = 1:n.bins, labels = hrmin, las = 2, cex.axis = 0.75)#
axis(2)#
box()
seq(1, n.bins, 10)
plot(dat, type = 'l', axes = FALSE, ylab = ylabel, xlab = 'Hour')#
axis(1, at = seq(1, n.bins, 10), labels = hrmin[seq(1, n.bins, 10)], las = 2, cex.axis = 0.75)#
axis(2)#
box()
plot(dat, type = 'l', axes = FALSE, ylab = ylabel, xlab = 'Hour')#
axis(1, at = seq(1, n.bins, 12), labels = hrmin[seq(1, n.bins, 12)], las = 2, cex.axis = 0.75)#
axis(2)#
box()
source('R/read.dat.R')#
source('R/stackdata.R')#
source('R/plot.running.R')#
source('R/bin.running.R')#
#
A  <- read.dat('data/061105A.DAT')#
B  <- read.dat('data/061105B.DAT')#
C  <- read.dat('data/061105C.DAT')#
D  <- read.dat('data/061105D.DAT')
bin.size <- 20#
aggrA <- bin.running(A, computer = 'A', bin.size = bin.size)#
aggrB <- bin.running(B, computer = 'B', bin.size = bin.size)#
aggrC <- bin.running(C, computer = 'C', bin.size = bin.size)#
aggrD <- bin.running(D, computer = 'D', bin.size = bin.size)#
#
running <- stackdata(aggrA[[1]], aggrB[[1]], aggrC[[1]], aggrD[[1]])#
time.data <- aggrA[[2]]#
#
plot.running(running, time.data, whlnum = 1)
bin.size <- 5#
aggrA <- bin.running(A, computer = 'A', bin.size = bin.size)#
aggrB <- bin.running(B, computer = 'B', bin.size = bin.size)#
aggrC <- bin.running(C, computer = 'C', bin.size = bin.size)#
aggrD <- bin.running(D, computer = 'D', bin.size = bin.size)#
#
running <- stackdata(aggrA[[1]], aggrB[[1]], aggrC[[1]], aggrD[[1]])#
time.data <- aggrA[[2]]#
#
plot.running(running, time.data, whlnum = 1)
license()
library(binning)
?bin.running
?binning
